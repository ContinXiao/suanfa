<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2栈和队列s on My New Hugo Site</title>
    <link>http://shrouded-inlet-85726.herokuapp.com/2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
    <description>Recent content in 2栈和队列s on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://shrouded-inlet-85726.herokuapp.com/2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>栈和队列</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</guid>
      <description>

&lt;h3 id=&#34;chapter-2:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 2&lt;/h3&gt;

&lt;h1 id=&#34;栈和队列:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;栈和队列&lt;/h1&gt;

&lt;p&gt;栈是一种特殊的表，其只能在表的末端进行插入和删除，因此也为称为LIFO(后进先出)表，常用的实现方式包括数组实现和链表实现。
队列也是一种特殊的表，使用队列时插入在一端进行而删除在另一端，所以是FIFO(先进先出)表。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>栈</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/stack/</guid>
      <description>&lt;p&gt;这里我们只是简单实现一下栈的api,在不考虑性能的情况下，用python的list完全可以实现。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;加个图&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Stack:
    def __init__(self,datas=[]):
        #用一个list来保存栈的数据
        self.datas = datas

    def __len__(self):
        #计算栈内数据个数
        return len(self.datas)

    def isEmpty(self):
        #判断栈是否为空栈
        return len(self) == 0

    def push(self,data):
        #压栈，将一个元素压入栈中
        self.datas.append(data)

    def pop(self):
        #栈顶元素出栈，如果栈为空栈则返回None
        return self.datas.pop() if not self.isEmpty() else None

    def peek(self):
        #查看栈顶元素
        return self[len(self.datas)-1] if not self.isEmpty() else None
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>队列</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/queue/</guid>
      <description>

&lt;p&gt;这里我们只是简单实现一下队列的api,在不考虑性能的情况下，用python的list完全可以实现&lt;/p&gt;

&lt;h2 id=&#34;简单队列:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;简单队列&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;加个图&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;队列主要的api包括入队，出队，以及查看队首元素&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Queue:
    def __init__(self,datas=[]):
        #用一个list保存队列数据
        self.datas = datas

    def __len__(self):
        #计算队列数据长度
        return len(self.datas)

    def isEmpty(self):
        #判断队列是否为空
        return len(self) == 0

    def enqueue(self, data):
        #入队
        self.datas.append(data)

    def dequeue(self):
        #出队
        return self.datas.pop(0) if not self.isEmpty() else None

    def peek(self):
        #查看队首元素
        return self[0] if not self.isEmpty() else None
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;双端队列:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;双端队列&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;加个图&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;和简单队列不同的是，双端队列两边都可以插入和删除。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Deque:
    def __init__(self,datas=[]):
        self.datas = datas

    def __len__(self):
    	return len(self.datas)

    def isEmpty(self):
    	return len(self) == 0

    def enqueue(self, data):
        self.datas.append(data)

    def dequeue(self):
        return self.datas.pop(0) if not self.isEmpty() else None

    def enqueueFront(self, data):
        #头部入队
        self.datas.insert(0, data)

    def dequeueBack(self):
        #头部出队
        return self.datas.pop() if not self.isEmpty() else None

    def peekFront(self):
        return self[0] if not self.isEmpty() else None

    def peekBack(self):
    	return self[len(self)-1]  if not self.isEmpty() else None
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;queue和deque:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Queue和deque&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/library/queue.html&#34;&gt;Queue官方文档&lt;/a&gt;，这是标准库里的队列&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2.7/library/collections.html#collections.deque&#34;&gt;deque官方文档&lt;/a&gt;，这是collections包里的双端队列&lt;/p&gt;

&lt;p&gt;这两个类都很容易上手。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>常见问题</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/commonquestion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/commonquestion/</guid>
      <description>

&lt;h2 id=&#34;valid-parenthese:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;valid Parenthese&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/valid-parentheses/&#34;&gt;leetcode 20题&lt;/a&gt; 题目要求我们判断一个字符串是否为有效的括号组。&amp;rdquo;{[]()()}&amp;ldquo;是一个有效的括号组，而&amp;rdquo;{()[}&amp;ldquo;并不是。&lt;/p&gt;

&lt;p&gt;我们可以用栈来帮助我们实现。当我们遇到左括号的时候我们将其压入栈中，当我们遇到右括号的时候，我们让栈顶元素出栈，并查看得到的左括号是否和当前的右括号匹配，如果遇到右括号而当前栈为空的话，显然也可以直接判断这个字符串不是有效的括号组&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution(object):
    def isValid(self, s):
        dict = {&amp;quot;}&amp;quot;:&amp;quot;{&amp;quot;,&amp;quot;]&amp;quot;:&amp;quot;[&amp;quot;,&amp;quot;)&amp;quot;:&amp;quot;(&amp;quot;}
        stack = []
        for st in s:
            if st in dict.values():
                stack.append(st)
            elif len(stack)&amp;gt;0:
                p = stack.pop()
                if p != dict[st]:
                    return False
            else:
                return False
        return stack == []
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;basic-calculator:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;basic calculator&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/basic-calculator/&#34;&gt;leetcode 224题&lt;/a&gt;
题目要求实现一个能够计算公式值的函数。比如输入&amp;rdquo;1 + 1&amp;rdquo;返回2，输入&amp;rdquo;(1-(4-5+2)-3)+(6+8)&amp;ldquo;返回11，只需要支持加法减法和括号就可以了。&lt;/p&gt;

&lt;p&gt;比较特殊的就是括号，我们知道，括号里面的运算具有优先级，但是在解析字符串的时候，我们从左往右依次解析，所以我们不可能提前知道哪部分需要被先计算。我们可以在遇到左括号的时候，对当前数值进行入栈，并将括号前的符号也入栈。比如在&amp;rdquo;(1-(4-5+2)-3)+(6+8)&amp;ldquo;我们在解析到第二个左括号的时候，就把当前计算到的1入栈，然后把负号也入栈。而当我们解析到第一个右括号的时候，我们已经计算出括号内的值为1，我们将此时处于栈顶的负号出栈并乘上括号内的结果1。然后栈顶元素1出栈加上-1得到0。我们重复这个过程知道字符串解析完成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution(object):
    def calculate(self, s):
        res = 0
        num = 0
        sign = 1
        stack = []
        for c in s:
            if c.isdigit():
                num = 10 * num + int(c)
            elif c in &amp;quot;+-&amp;quot;:
                res += sign * num
                num = 0
                sign = 1 if c==&amp;quot;+&amp;quot; else -1
            elif c == &amp;quot;(&amp;quot;:
                stack.append(res)
                stack.append(sign)
                sign,res = 1,0
            elif c == &amp;quot;)&amp;quot;:
                res += sign * num
                res *= stack.pop()
                res += stack.pop()
                num = 0
        return res + num*sign
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>