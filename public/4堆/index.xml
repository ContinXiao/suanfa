<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>4堆s on My New Hugo Site</title>
    <link>http://shrouded-inlet-85726.herokuapp.com/4%E5%A0%86/</link>
    <description>Recent content in 4堆s on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://shrouded-inlet-85726.herokuapp.com/4%E5%A0%86/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>优先队列（堆）</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/4%E5%A0%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/4%E5%A0%86/</guid>
      <description>

&lt;h3 id=&#34;chapter-4:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 4&lt;/h3&gt;

&lt;h1 id=&#34;堆:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;堆&lt;/h1&gt;

&lt;p&gt;在第二章中我们已经介绍了队列这种数据结构，它的特点是先进先出。这种数据结构非常的有用。比如在分布式调度系统中，我们就需要维护一个任务队列。不断的将之前的任务分配给worker来处理。但是有时候，我们有一些非常紧急的任务需要立即被处理，但是这个任务却被排在了一个不那么重要但是却耗时特别长的任务后面。这时候，我们需要一个新的数据结构，这种数据结构不再是先进先出，而是根据优先级来决定下一个出队的元素。&lt;/p&gt;

&lt;p&gt;一种比较明显的优先队列的实现方式是链表。我们可以在表头入队，在出队的时候遍历链表找最小元素，这种情况下插入的时间复杂度为O(1)而出队的时间复杂度为O(n)。或者我们也可以在入队时保持链表有序，而在出队时直接在表头出队，这种情况下插入的时间复杂度为O(n)而出队的时间复杂度为O(1)&lt;/p&gt;

&lt;p&gt;但是我们还有更好的工具可以使用，我们称之为二叉堆。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>二叉堆</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/4%E5%A0%86/binaryheap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/4%E5%A0%86/binaryheap/</guid>
      <description>

&lt;p&gt;二叉堆是一棵被完全填满的二叉树。它的最重要的特性则是堆序性。&lt;/p&gt;

&lt;p&gt;所谓堆序是指：对于所有节点儿子都比父亲大，或者对于所有节点儿子都比父亲小。这种性质可以保证出队的时间复杂度为O(1)。&lt;/p&gt;

&lt;h2 id=&#34;最小堆:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;最小堆&lt;/h2&gt;

&lt;p&gt;要形成最小堆，我们就要不断维持堆序。在新元素入堆的过程中，我们先将一个空穴添加到最后，然后不断对其进行&amp;rdquo;上滤&amp;rdquo;操作直到找到插入位置。而当我们删除最小元素（堆顶）时，我们可以把堆首元素变成空穴，然后&amp;rdquo;下滤&amp;rdquo;到合适位置。并把堆尾元素移入。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Heap:
    ##最小堆（父亲比儿子小）
    def __init__(self, datas=[]):
        pass

    def buildheap(self):
        for i in range(len(self) / 2 - 1, -1, -1):
            self.percolateDown(i)

    def percolateDown(self, i):
        tmp = self[i]
        while i*2+1 &amp;lt; len(self):
            child = 2*i+1
            if child+1 &amp;lt; len(self) and self[child+1] &amp;lt; self[child]:
                child += 1
            if self[child] &amp;lt; tmp:
                self[i] = self[child]
                i = child
            else:
                break
        self[i] = tmp

    def __len__(self):
        return len(self.datas)

    def isEmpty(self):
        return len(self) == 0

    def findMin(self):
        return self[0] if not self.isEmpty() else None

    def deleteMin(self):
        if self.isEmpty():
            return None
        minItem = self[0]
        self[0] = self.datas.pop()
        self.percolateDown(0)
        return minItem

    def insert(self, data):
        hole = len(self)
        self.datas.append(data)
        while hole &amp;gt; 0 and data &amp;lt; self[(hole+1)/2-1]:
            self[hole] = self[(hole + 1)/2 -1]
            hole = (hole+1)/2-1
        self[hole] = data

    def __getitem__(self,i):
    	return self.datas[i]

    def __setitem__(self,i,y):
    	self.datas[i] = y
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;测试:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;测试&lt;/h2&gt;

&lt;p&gt;写完了上面的堆结构，我们怎么能保证我们的代码是正确的呢。一个好的编程习惯是在编写业务代码前，先写出高质量的测试代码。好的测试代码应该尽可能的覆盖边界条件，这里为了简化代码，我们只写了简单的测试样例。我们使用nose测试框架来写我们的测试。将下面的代码添加到上面的堆结构后面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from nose.tools import assert_equal

def test():
    h = Heap([32,68,19,65,24,26,13,21,16,31])
    assert_equal(h.datas, [13, 16, 19, 21, 24, 26, 32, 68, 65, 31])
    h.insert(14)
    assert_equal(h.datas, [13, 14, 19, 21, 16, 26, 32, 68, 65, 31, 24])
    assert_equal(h.deleteMin(),13)
    assert_equal(h.datas, [14, 16, 19, 21, 24, 26, 32, 68, 65, 31])

    print &amp;quot;success&amp;quot;

test()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行后如果输出&amp;rdquo;success&amp;rdquo;则表明我们的代码准确无误。记住，我们应该在编写业务代码前编写测试代码。怎么样，是不是感觉已经可以在简历上骄傲地写下熟悉TDD开发了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>常见问题</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/4%E5%A0%86/commonquestion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/4%E5%A0%86/commonquestion/</guid>
      <description>

&lt;h2 id=&#34;merge-k-sorted-lists:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Merge k Sorted Lists&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-k-sorted-lists/&#34;&gt;leetcode 23题&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution(object):
    def mergeKLists(self, lists):

        from heapq import heappush, heappop, heapreplace, heapify
        dummy = node = ListNode(0)
        h = [(n.val, n) for n in lists if n]
        heapify(h)
        
        while h:
            v, n = h[0]
            if n.next is None:
                heappop(h)
            else:
                heapreplace(h, (n.next.val, n.next))
            node.next = n
            node = node.next

        return dummy.next

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>