<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>7图算法s on My New Hugo Site</title>
    <link>http://shrouded-inlet-85726.herokuapp.com/7%E5%9B%BE%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 7图算法s on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://shrouded-inlet-85726.herokuapp.com/7%E5%9B%BE%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>图算法</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/7%E5%9B%BE%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/7%E5%9B%BE%E7%AE%97%E6%B3%95/</guid>
      <description>

&lt;h3 id=&#34;chapter-7:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 7&lt;/h3&gt;

&lt;h1 id=&#34;图算法:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;图算法&lt;/h1&gt;

&lt;p&gt;一个图&lt;code&gt;$G=(V,E)$&lt;/code&gt;由顶点集V和边集E。每一条边就是一个点对。如果点对是有序的，那么图就是有向图，否则就是无向图。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>图的表示</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/7%E5%9B%BE%E7%AE%97%E6%B3%95/description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/7%E5%9B%BE%E7%AE%97%E6%B3%95/description/</guid>
      <description>

&lt;p&gt;图的表示有两种，邻接矩阵和邻接表。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shrouded-inlet-85726.herokuapp.com/img/ch7/graph1.png&#34; alt=&#34;graph&#34; /&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;邻接矩阵&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;邻接表&lt;/th&gt;
&lt;th&gt;dest&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1,4,5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;邻接矩阵:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;邻接矩阵&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indexCounter = 0

class Graph:

    def __init__(self, matrix=[]):
        self.matrix = matrix

    def createVertex(self, data):
        size = len(self.matrix)
        for row in self.matrix:
            row.append(0)
        self.matrix.append([0]*(size+1))
        return Vertex(data)

    def connect(self, source, dest, weight):
        self.matrix[source.index][dest.index] = weight

    def weightBetween(self, source, dest):
        return self.matrix[source.index][dest.index]

class Vertex:
    def __init__(self, data):
        global indexCounter
        self.data = data
        self.index = indexCounter
        indexCounter += 1


graph = Graph()
v1 = graph.createVertex(1)
v2 = graph.createVertex(2)
v3 = graph.createVertex(3)
v4 = graph.createVertex(4)
v5 = graph.createVertex(5)
graph.connect(v1, v2, 1.0)
graph.connect(v4, v5, 3.0)
print graph.matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;邻接表:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;邻接表&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Edge:
    def __init__(self, source=None, dest=None, weight=0):
        self.source = source
        self.dest = dest
        self.weight = weight

class Vertex:
    def __init__(self, data):
        self.data = data
        self.edges = []

    def connectTo(self,dest,weight):
        self.edges.append(Edge(source=self,dest=dest,weight=weight))

    def connectBetween(self, dest, weight):
        self.connectTo(dest, weight)
        dest.connectTo(self, weight)

    def isConnectedTo(self, dest):
        for e in self.edges:
            if e.dest == dest:
                return True
        return False
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;图的拓扑排序:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;图的拓扑排序&lt;/h3&gt;

&lt;p&gt;拓扑排序是对有向无环图的顶点的一种排序。如果存在一条从&lt;code&gt;$v_i$&lt;/code&gt;到&lt;code&gt;$v_j$&lt;/code&gt;的路径，那么在排序中&lt;code&gt;v_j就出现在v_i的后面&lt;/code&gt;。据此我们也可以得出，如果一个图有环，那么拓扑排序就不可能存在。求拓扑排序的算法是先找出任意一个没有入边的顶点，然后删除该点和从它发出的所有边。不断进行这一步骤直到取出所有顶点。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最短路径算法</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/7%E5%9B%BE%E7%AE%97%E6%B3%95/shortestpath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/7%E5%9B%BE%E7%AE%97%E6%B3%95/shortestpath/</guid>
      <description>

&lt;p&gt;我们有一个有权图G，并且有一个特定的顶点s作为出发点，需要计算s到G中其他顶点之间的最短路径。&lt;/p&gt;

&lt;h3 id=&#34;dijkstra算法:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;dijkstra算法&lt;/h3&gt;

&lt;p&gt;解决单源最短路径问题的一般方法叫做dijkstra算法。这个算法是贪婪算法的最好例子。贪婪算法一般分阶段去求解一个问题，在每个阶段都把出现的当做最好的处理。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shrouded-inlet-85726.herokuapp.com/img/ch7/graph2.png&#34; alt=&#34;graph2&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;思路:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;思路&lt;/h3&gt;

&lt;p&gt;首先我们给每个顶点维护三个特征：是否已知，到出发点的距离，路径（前驱节点）。我们从出发点开始，每次选择距离出发点最近（贪婪）的节点一个未知节点，将其变为已知。并更新其他未知节点到出发点的距离。&lt;/p&gt;

&lt;h3 id=&#34;伪代码:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;伪代码&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;while True:
  v &amp;lt;- 未知顶点中distance最小的。
  if 没有未知顶点：
    break
  v.know = True

  for 每个和v相邻的顶点w：
    if w 未知：
      if v.dist + c和w间的距离 &amp;lt; w.dist:
        w.dist = v.dist + c和w间的距离
        w.path = v
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;实例:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;实例&lt;/h3&gt;

&lt;p&gt;以上图为例，我们先建立一个初始表.这时候所有点都未知&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;v&lt;/th&gt;
&lt;th&gt;是否已知&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$d_v$&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$p_v$&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_2$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$\infty$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_3$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$\infty$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$\infty$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_5$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$\infty$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_6$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$\infty$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_7$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$\infty$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;首先我们选择V1作为出发点，从v1出发走一步可以到达v2和v4,我们更新这两个点的distance,并将它们的path设为v1.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;v&lt;/th&gt;
&lt;th&gt;是否已知&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$d_v$&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$p_v$&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_2$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_3$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$\infty$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_5$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$\infty$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_6$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$\infty$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_7$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$\infty$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;然后，我们选择v4（未知点中距离出发点最近）并标记为known，从v4出发可以到达v3,v5,v6,v7。更新这几个节点的distance，并将其path设为v4&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;v&lt;/th&gt;
&lt;th&gt;是否已知&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$d_v$&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$p_v$&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_2$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_3$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_5$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_6$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_7$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;接下来我们选择v2（v2,v3,v5都是最近，随便选一个），v2出发可以到达v4和v5,但是并没有缩短这两个点的distance，所以我们不更新这两个点。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;v&lt;/th&gt;
&lt;th&gt;是否已知&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$d_v$&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$p_v$&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_2$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_3$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_5$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_6$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_7$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;然后是v3,v3出发可以到v1和v6。原本到v1-v4-v6的距离为9，现在v1-v4-v3-v6的距离为8，所以我们更新v6&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;v&lt;/th&gt;
&lt;th&gt;是否已知&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$d_v$&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$p_v$&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_2$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_3$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_5$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_6$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_3$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_7$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;然后是v5,没啥可更新的&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;v&lt;/th&gt;
&lt;th&gt;是否已知&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$d_v$&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$p_v$&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_2$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_3$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_5$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_6$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_3$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_7$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;然后设置v7为known,v1-v4-v7-v6距离只有6，更新v6的distance和path。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;v&lt;/th&gt;
&lt;th&gt;是否已知&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$d_v$&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$p_v$&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_2$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_3$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_5$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_6$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_7$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_7$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;最后我们得到我们的结果&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;v&lt;/th&gt;
&lt;th&gt;是否已知&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$d_v$&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;$p_v$&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_2$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_3$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_1$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_5$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_6$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_3$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;$v_7$&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$v_4$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;代码实现:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;代码实现&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MAX_NUM = 1000000
import copy
class Edge:
	def __init__(self, neighbour=None, distance=MAX_NUM):
		self.neighbour = neighbour
		self.distance = distance

class Vertex:
	def __init__(self,label=None):
		self.neighbours = []
		self.visited = False
		self.label =label
		self.path = None

class Graph:
	def __init__(self):
		self.vertexs = []
		self.edges = []

	def addVertex(self, label):
		vertex = Vertex(label)
		self.vertexs.append(vertex)
		return vertex

	def addEdge(self, source, dest, weight):
		edge = Edge(dest, weight)
		source.neighbours.append(edge)

def dijkstra(graph, source):
	for vertex in graph.vertexs:
		vertex.dist = MAX_NUM
		vertex.known = False
	source.dist = 0
	while True:
		#smallest unknown distance vertex
		min_dist = MAX_NUM
		v = Vertex()
		for node in graph.vertexs:
			if node.known == False and node.dist &amp;lt; min_dist:
				min_dist = node.dist
				v = node

		if not v.label:
			break
		v.known = True

		for edge in v.neighbours:
			if not edge.neighbour.known:
				if v.dist + edge.distance &amp;lt; edge.neighbour.dist:
					edge.neighbour.dist = v.dist + edge.distance
					edge.neighbour.path = v


def print_path(v):
	if v.path:
		print_path(v.path)
	print v.label


from nose.tools import assert_equal

def test():
	graph = Graph()
	nodeA = graph.addVertex(&#39;A&#39;)
	nodeB = graph.addVertex(&#39;B&#39;)
	nodeC = graph.addVertex(&#39;C&#39;)
	nodeD = graph.addVertex(&#39;D&#39;)
	nodeE = graph.addVertex(&#39;E&#39;)
	nodeF = graph.addVertex(&#39;F&#39;)

	graph.addEdge(nodeA, nodeB, 6)
	graph.addEdge(nodeA, nodeC, 3)
	graph.addEdge(nodeB, nodeC, 2)
	graph.addEdge(nodeB, nodeD, 5)
	graph.addEdge(nodeC, nodeD, 3)
	graph.addEdge(nodeC, nodeE, 4)
	graph.addEdge(nodeD, nodeE, 2)
	graph.addEdge(nodeD, nodeF, 3)
	graph.addEdge(nodeE, nodeF, 5)

	dijkstra(graph, nodeA)

	assert_equal(nodeA.dist,0)
	assert_equal(nodeB.dist,6)
	assert_equal(nodeC.dist,3)
	assert_equal(nodeD.dist,6)
	assert_equal(nodeE.dist,7)
	assert_equal(nodeF.dist,9)

	print &amp;quot;success&amp;quot;
test()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>图的遍历</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/7%E5%9B%BE%E7%AE%97%E6%B3%95/dfsandbfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/7%E5%9B%BE%E7%AE%97%E6%B3%95/dfsandbfs/</guid>
      <description>

&lt;p&gt;图的遍历主要有两种算法，分别是广度优先(bfs)和深度优先(dfs)。&lt;/p&gt;

&lt;h2 id=&#34;bfs:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;BFS&lt;/h2&gt;

&lt;p&gt;bfs算法可以使用队列来实现。简单来说，我们从某一个点开始，先将其所有邻居节点加入队列，并标注为visited,然后依次出队，并将出队的节点的所有邻居中还没有被经过的节点入队，直到队列为空（所有节点都已经被经过）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt; #coding:utf-8
class Edge:
    def __init__(self, neighbour=None):
        self.neighbour = neighbour

class Vertex:
    def __init__(self,label):
        self.neighbours = []
        self.visited = False
        self.label =label

class Graph:
    def __init__(self):
        self.vertexs = []
        self.edges = []

    def addVertex(self, label):
        vertex = Vertex(label)
        self.vertexs.append(vertex)
        return vertex

    def addEdge(self, source, dest):
        edge = Edge(dest)
        source.neighbours.append(edge)


class Queue:
    def __init__(self, datas=[]):
        self.datas = datas
    def __len__(self):
        return len(self.datas)
    def isEmpty(self):
        return len(self) == 0
    def enqueue(self,data):
        self.datas.append(data)
    def dequeue(self):
        return self.datas.pop(0) if not self.isEmpty() else None
    def peek(self):
        return self.datas[0] if not self.isEmpty() else None


def BFS(graph, source):
    queue = Queue()

    #初始点入队
    queue.enqueue(source)  
    result = [source.label]
    source.visited = True
    #队列非空时循环
    while not queue.isEmpty():
        #节点出队
        node = queue.dequeue()
        for edge in node.neighbours:
            #找到该节点的所有邻居，如果该邻居还没有被经过，怎将其入队
            node = edge.neighbour
            if not node.visited:
                queue.enqueue(node)
                node.visited = True
                result.append(node.label)
    return result
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dfs:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;DFS&lt;/h2&gt;

&lt;p&gt;DFS算法应用了递归的思想，用大白话讲：从节点a开始遍历图，等于从节点a的邻居开始分别遍历图（跳过已经被经过过的节点）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#coding:utf-8
class Edge:
    def __init__(self, neighbour=None):
        self.neighbour = neighbour

class Vertex:
    def __init__(self,label):
        self.neighbours = []
        self.visited = False
        self.label =label

class Graph:
    def __init__(self):
        self.vertexs = []
        self.edges = []

    def addVertex(self, label):
        vertex = Vertex(label)
        self.vertexs.append(vertex)
        return vertex

    def addEdge(self, source, dest):
        edge = Edge(dest)
        source.neighbours.append(edge)


def DFS(source):
    result = [source.label]
    source.visited = True
    for edge in source.neighbours:
        if not edge.neighbour.visited:
            result += DFS(edge.neighbour)
    return result
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;应用:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;应用&lt;/h2&gt;

&lt;p&gt;图的遍历（尤其是dfs）是非常常见的算法。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/combination-sum/&#34;&gt;leetcode 39题&lt;/a&gt; 就是一个可以用dfs解决的问题。题目给定一个数字集合，比如[2,3,6,7]，和一个目标数据，比如7，解集为[[7], [2,2,3]]。此题我们就可以用dfs来解&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution(object):
    def combinationSum(self, candidates, target):
        res = []
        self.dfs(candidates, target, 0, [], res)
        return res

    def dfs(self, cands, target, ind, path, res):
        if target == 0:
            res.append(path)
            return
        if target &amp;lt; 0:
            return
        for i in range(ind, len(cands)):
            self.dfs(cands, target - cands[i], i, path+[cands[i]], res)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/permutations/&#34;&gt;leetcode 46题&lt;/a&gt; 求全排列，也可以用dfs来求解。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution:
    def permute(self,nums):
        res = []
        self.dfs(nums, [], res)
        return res
    def dfs(self, nums, path, res):
        if not nums:
            res.append(path)
            return
        for i,n in enumerate(nums):
            self.dfs(nums[:i]+nums[i+1:],path+[n],res)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>