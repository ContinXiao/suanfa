<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://shrouded-inlet-85726.herokuapp.com/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://shrouded-inlet-85726.herokuapp.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Preface</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/0preface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/0preface/</guid>
      <description>

&lt;h3 id=&#34;preface:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Preface&lt;/h3&gt;

&lt;h1 id=&#34;数据结构与算法设计:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;数据结构与算法设计&lt;/h1&gt;

&lt;p&gt;最近有一些朋友问我python入门应该看什么，或者说想自学cs应该怎么学，还有一些人问我最近要找工作要刷算法应该看什么书？正好我也马上要找工作了，平时学术之余抽了点时间刷了几题leetcode，觉得应该总结一点东西出来，造福大众。这是一本关于数据结构和算法设计的电子书。本书1-5章内容为常见数据结构，会介绍一些面试中最常见的数据结构（实现和应用）；后几章介绍了一些经典算法，并整理了一些题目来做。本书仍在更新过程中，争取每天加入一点内容。如果您阅读本书后认为它对您有帮助，请给我捐款，来支持我写出更好的内容。当然，免费的东西未必不好，收费的也未必是好的内容。但是对于一名内容生产者来说，经济上的支持无疑能推动其写出更有价值的内容。如您单次捐款超过20元，您将获得会员资格并加入我们的微信讨论组（或telegram讨论组，可以同时加入或都不加）。会员还会收到我制作的数据结构与算法的cheatsheet一份,以及书中所有代码的集合。捐款方式为转账到支付宝账号cmhinseu@163.com&lt;/p&gt;

&lt;p&gt;本章将会介绍一些数据结构和算法方面的基本概念。&lt;/p&gt;

&lt;p&gt;contact me：&lt;/p&gt;

&lt;p&gt;email: chenmh@shanghaitech.edu.cn&lt;/p&gt;

&lt;p&gt;weibo: &lt;a href=&#34;http://weibo.com/chenminhua91&#34;&gt;像一块滚石91&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>优先队列（堆）</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/4%E5%A0%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/4%E5%A0%86/</guid>
      <description>

&lt;h3 id=&#34;chapter-4:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 4&lt;/h3&gt;

&lt;h1 id=&#34;堆:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;堆&lt;/h1&gt;

&lt;p&gt;在第二章中我们已经介绍了队列这种数据结构，它的特点是先进先出。这种数据结构非常的有用。比如在分布式调度系统中，我们就需要维护一个任务队列。不断的将之前的任务分配给worker来处理。但是有时候，我们有一些非常紧急的任务需要立即被处理，但是这个任务却被排在了一个不那么重要但是却耗时特别长的任务后面。这时候，我们需要一个新的数据结构，这种数据结构不再是先进先出，而是根据优先级来决定下一个出队的元素。&lt;/p&gt;

&lt;p&gt;一种比较明显的优先队列的实现方式是链表。我们可以在表头入队，在出队的时候遍历链表找最小元素，这种情况下插入的时间复杂度为O(1)而出队的时间复杂度为O(n)。或者我们也可以在入队时保持链表有序，而在出队时直接在表头出队，这种情况下插入的时间复杂度为O(n)而出队的时间复杂度为O(1)&lt;/p&gt;

&lt;p&gt;但是我们还有更好的工具可以使用，我们称之为二叉堆。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>分治算法</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/9%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/9%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/</guid>
      <description>

&lt;h3 id=&#34;chapter-9:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 9&lt;/h3&gt;

&lt;h1 id=&#34;分治算法:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;分治算法&lt;/h1&gt;

&lt;p&gt;分治算法顾名思义，有两部分组成，分解问题求解，合并子解得到原问题的解。最有名的分治算法应该就是快速排序和归并排序了吧（参考第6章），先把序列一分为二，分别排序后再合并序列。分治算法先将问题变成两个规模只有原来一半的问题，然后用一些附加工作合并问题，在一些问题中，这种解法能够很好的降低算法的时间复杂度。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/a%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/a%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>

&lt;h3 id=&#34;chapter-10:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 10&lt;/h3&gt;

&lt;h1 id=&#34;动态规划:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;动态规划&lt;/h1&gt;

&lt;p&gt;刚刚学会使用递归算法的时候，我像发现了新大陆一样兴奋，疯狂的使用递归算法。但是递归算法也深深伤害了我。函数反复地自身调用可能会导致算法在时间和空间复杂度上都变得非常糟糕。很多时候，我们应该想办法把递归算法改成非递归的算法。动态规划就是一种这样的技巧，通过把子问题的答案存在一张表中来将递归算法变成非递归算法。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>图算法</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/7%E5%9B%BE%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/7%E5%9B%BE%E7%AE%97%E6%B3%95/</guid>
      <description>

&lt;h3 id=&#34;chapter-7:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 7&lt;/h3&gt;

&lt;h1 id=&#34;图算法:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;图算法&lt;/h1&gt;

&lt;p&gt;一个图&lt;code&gt;$G=(V,E)$&lt;/code&gt;由顶点集V和边集E。每一条边就是一个点对。如果点对是有序的，那么图就是有向图，否则就是无向图。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>排序</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/6%E6%8E%92%E5%BA%8F/</guid>
      <description>

&lt;h3 id=&#34;chapter-1:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 1&lt;/h3&gt;

&lt;h1 id=&#34;排序算法:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;排序算法&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算法&lt;/th&gt;
&lt;th&gt;性能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;插入排序&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$O(N^2)$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;希尔排序&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$o(N^2)$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;堆排序&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$O(NlogN)$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;归并排序&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$O(NlogN)$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;快速排序&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$O(NlogN)$&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>散列</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/5%E6%95%A3%E5%88%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/5%E6%95%A3%E5%88%97/</guid>
      <description>

&lt;h3 id=&#34;chapter-1:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 1&lt;/h3&gt;

&lt;h1 id=&#34;散列:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;散列&lt;/h1&gt;

&lt;p&gt;散列是一种用于以常数平均时间插入删除和查找的数据结构。在各种编程语言中都已经有相应的实现，比如python中的字典;java中有Hashtable和HashMap;javascript中的对象就是一个hash;golang中有map;swift中有Dictionary等等。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>栈和队列</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/2%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</guid>
      <description>

&lt;h3 id=&#34;chapter-2:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 2&lt;/h3&gt;

&lt;h1 id=&#34;栈和队列:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;栈和队列&lt;/h1&gt;

&lt;p&gt;栈是一种特殊的表，其只能在表的末端进行插入和删除，因此也为称为LIFO(后进先出)表，常用的实现方式包括数组实现和链表实现。
队列也是一种特殊的表，使用队列时插入在一端进行而删除在另一端，所以是FIFO(先进先出)表。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>树</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/3%E6%A0%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/3%E6%A0%91/</guid>
      <description>

&lt;h3 id=&#34;chapter-3:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 3&lt;/h3&gt;

&lt;h1 id=&#34;树:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;树&lt;/h1&gt;

&lt;p&gt;树结构和前面介绍的几种数据结构不同，它属于一种分支结构。树结构广泛存在于现实世界中，比如本书的目录结构，比如计算机的文件系统。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>贪心算法</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/8%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/8%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>

&lt;h3 id=&#34;chapter-8:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 8&lt;/h3&gt;

&lt;h1 id=&#34;贪心算法:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;贪心算法&lt;/h1&gt;

&lt;p&gt;我们在图算法一章中提到了dijkstra算法，这个算法每次都会选择最近的一个节点来加入已知集合。这种算法我们称之为贪心算法。贪心算法在运行的每一个阶段，都会选择一个当前最好的选择（局部最优解）。比较著名的贪心算法问题有dijkstra算法，kruskal和prime算法，找零问题等等。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/1%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/1%E9%93%BE%E8%A1%A8/</guid>
      <description>

&lt;h3 id=&#34;chapter-1:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 1&lt;/h3&gt;

&lt;h1 id=&#34;链表:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;链表&lt;/h1&gt;

&lt;p&gt;本章开始，我们将学习一些常见的数据结构。首先我们要掌握一种非常基础的数据结构&amp;mdash;-链表。在链表中的每个节点都包含其数据内容以及一个指向下一个元素的指针。我们可以通过这些指针来遍历链表。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>图的最小生成树</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/8%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/prim_kruskal/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/8%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/prim_kruskal/</guid>
      <description>

&lt;h2 id=&#34;最小生成树:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;最小生成树&lt;/h2&gt;

&lt;p&gt;我们要考虑的问题是要在一个无向图中找出一个生成树，这棵树要连接图中的所有节点，并且树中的所有边的权值之和要最小，这就是最小生成树。
求无向图的最小生成树的方法是很典型的贪婪算法。主要有prim算法和kruskal算法。&lt;/p&gt;

&lt;h2 id=&#34;prim算法:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;prim算法&lt;/h2&gt;

&lt;p&gt;像已知节点集合中不停的加入和已知节点集合相邻的未知集合的节点，知道全部节点从未知变为已知&lt;/p&gt;

&lt;h2 id=&#34;kruskal算法:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;kruskal算法&lt;/h2&gt;

&lt;p&gt;不断选择最短且不会形成环的边，直到所有节点变为已知节点。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>常见问题</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/9%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/commonquestion/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/9%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/commonquestion/</guid>
      <description>

&lt;h2 id=&#34;jump-game:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;jump game&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/jump-game/&#34;&gt;leetcode 55题&lt;/a&gt;
给定一组非负整数，每个数表示可以从这个位置向前跳不多于这个数的步子。判断是否可以从头跳到尾。&lt;/p&gt;

&lt;p&gt;比如 (2,3,1,1,4) 可以从第一个位置跳到第二个位置，再跳到最后一个位置&lt;/p&gt;

&lt;p&gt;再比如 (3,2,1,0,4) 则不能跳到最后一个位置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution(object):
    def canJump(self,nums):
        m = 0
        for i,n in enumerate(nums):
            if i &amp;gt; m:
                return False
            m = max(m, n+i)
        return True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jump-game-ii:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;jump game II&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/jump-game-ii/&#34;&gt;leetcode 45题&lt;/a&gt;
这题是上一题的升级版，假设你一定可以从头跳到尾，求最少要跳几次。我们保存两个值，一个是当前步数下能跳的最远距离，另一个是当前步数加一步条件下能到的最远距离。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution(object):
    def jump(self, nums):
        n, cur_max, next_max, steps = len(nums), 0, 0, 0
        for i in xrange(n):
            if i &amp;gt; cur_max:
                steps += 1
                cur_max = next_max
                if cur_max &amp;gt;= n: break
            next_max = max(next_max, nums[i] + i)
        return steps
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;best-time-to-buy-and-sell-stock-ii:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;best time to buy and sell stock II&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&#34;&gt;leetcode 122题&lt;/a&gt;
这道题的条件是可以买卖多次，但是如果处于买进状态下是不能买的。
策略很简单，涨价前买进，降价前卖出。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution(object):
    def maxProfit(self, prices):
        flag = False
        profit = 0
        for i in range(len(prices)-1):
            if prices[i]&amp;lt;prices[i+1] and not flag: #升值
                profit -= prices[i]
                flag = not flag
            if prices[i]&amp;gt;prices[i+1] and flag:
                profit += prices[i]
                flag = not flag
        if flag:
            profit += prices[-1]
        return profit

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>二叉堆</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/4%E5%A0%86/binaryheap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/4%E5%A0%86/binaryheap/</guid>
      <description>

&lt;p&gt;二叉堆是一棵被完全填满的二叉树。它的最重要的特性则是堆序性。&lt;/p&gt;

&lt;p&gt;所谓堆序是指：对于所有节点儿子都比父亲大，或者对于所有节点儿子都比父亲小。这种性质可以保证出队的时间复杂度为O(1)。&lt;/p&gt;

&lt;h2 id=&#34;最小堆:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;最小堆&lt;/h2&gt;

&lt;p&gt;要形成最小堆，我们就要不断维持堆序。在新元素入堆的过程中，我们先将一个空穴添加到最后，然后不断对其进行&amp;rdquo;上滤&amp;rdquo;操作直到找到插入位置。而当我们删除最小元素（堆顶）时，我们可以把堆首元素变成空穴，然后&amp;rdquo;下滤&amp;rdquo;到合适位置。并把堆尾元素移入。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Heap:
    ##最小堆（父亲比儿子小）
    def __init__(self, datas=[]):
        pass

    def buildheap(self):
        for i in range(len(self) / 2 - 1, -1, -1):
            self.percolateDown(i)

    def percolateDown(self, i):
        tmp = self[i]
        while i*2+1 &amp;lt; len(self):
            child = 2*i+1
            if child+1 &amp;lt; len(self) and self[child+1] &amp;lt; self[child]:
                child += 1
            if self[child] &amp;lt; tmp:
                self[i] = self[child]
                i = child
            else:
                break
        self[i] = tmp

    def __len__(self):
        return len(self.datas)

    def isEmpty(self):
        return len(self) == 0

    def findMin(self):
        return self[0] if not self.isEmpty() else None

    def deleteMin(self):
        if self.isEmpty():
            return None
        minItem = self[0]
        self[0] = self.datas.pop()
        self.percolateDown(0)
        return minItem

    def insert(self, data):
        hole = len(self)
        self.datas.append(data)
        while hole &amp;gt; 0 and data &amp;lt; self[(hole+1)/2-1]:
            self[hole] = self[(hole + 1)/2 -1]
            hole = (hole+1)/2-1
        self[hole] = data

    def __getitem__(self,i):
    	return self.datas[i]

    def __setitem__(self,i,y):
    	self.datas[i] = y
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;测试:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;测试&lt;/h2&gt;

&lt;p&gt;写完了上面的堆结构，我们怎么能保证我们的代码是正确的呢。一个好的编程习惯是在编写业务代码前，先写出高质量的测试代码。好的测试代码应该尽可能的覆盖边界条件，这里为了简化代码，我们只写了简单的测试样例。我们使用nose测试框架来写我们的测试。将下面的代码添加到上面的堆结构后面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from nose.tools import assert_equal

def test():
    h = Heap([32,68,19,65,24,26,13,21,16,31])
    assert_equal(h.datas, [13, 16, 19, 21, 24, 26, 32, 68, 65, 31])
    h.insert(14)
    assert_equal(h.datas, [13, 14, 19, 21, 16, 26, 32, 68, 65, 31, 24])
    assert_equal(h.deleteMin(),13)
    assert_equal(h.datas, [14, 16, 19, 21, 24, 26, 32, 68, 65, 31])

    print &amp;quot;success&amp;quot;

test()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行后如果输出&amp;rdquo;success&amp;rdquo;则表明我们的代码准确无误。记住，我们应该在编写业务代码前编写测试代码。怎么样，是不是感觉已经可以在简历上骄傲地写下熟悉TDD开发了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>二叉树</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/3%E6%A0%91/binarytree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/3%E6%A0%91/binarytree/</guid>
      <description>

&lt;p&gt;二叉树是一种非常常见常用（常考）的数据结构。二叉树的特点是每个节点最多有两个子女，分别称为左子女和右子女。下图就是一棵二叉树。节点1我们称作根节点。而4，5，6我们称作叶子节点。
&lt;img src=&#34;http://shrouded-inlet-85726.herokuapp.com/img/ch3/binarytree.png&#34; alt=&#34;binarytree&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;二叉搜索树:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;二叉搜索树&lt;/h2&gt;

&lt;p&gt;二叉搜索树是二叉树的子集，其特点是对于树中的每一个节点，其左子树中的所有元素都比它小，右子树中的所有元素都比它大。如下图，左侧的就是一棵二叉搜索树;而右侧的则不是，因为节点9在根节点10的右子树上，但是其值却比10小.
&lt;img src=&#34;http://shrouded-inlet-85726.herokuapp.com/img/ch3/bst1.png&#34; alt=&#34;bst&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;二叉搜索树的实现:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;二叉搜索树的实现&lt;/h2&gt;

&lt;p&gt;首先我们写出树节点的类，它包含三个属性：数据，左子树，右子树&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Node:
    def __init__(self, element, left=None, right=None):
        self.element = element
        self.left = left
        self.right = right
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面我们写出二叉搜索树的基本框架&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class BinarySearchTree:
    def __init__(self, root=None):
        self.root = root  #初始化函数

    def clear(self):
        self.root = None  #清空树

    def isEmpty(self):
        return self.root == None  #判断树是否为空

    def contain(self, x, node):
        pass  #查找某元素

    def findMin(self, node):
        pass  #找最小元素

    def findMax(self, node):
        pass  #找最大元素

    def insert(self, x, node):
        pass  #插入一个元素

    def remove(self, x, node):
        pass  #删除一个元素

    def print_tree(self, node):
        pass  #中序遍历

    def post_order_print_tree(self, node):
        pass  #后序遍历

    def pre_order_print_tree(self, node):
        pass  #前序遍历
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;树的遍历:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;树的遍历&lt;/h2&gt;

&lt;p&gt;树三种遍历方法:中序遍历，前序遍历和后序遍历。对于下面的树来说，
前序遍历的结果为 3,8,10,13,16,18&lt;/p&gt;

&lt;p&gt;中序遍历的结果为 10,8,3,16,13,18&lt;/p&gt;

&lt;p&gt;后序遍历的结果为 18,16,13,10,8,3&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shrouded-inlet-85726.herokuapp.com/img/ch3/bst2.png&#34; alt=&#34;bst2&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def print_tree(self, node):
    if node != None:
        self.print_tree(node.left)
        print node.element
        self.print_tree(node.right)

def post_order_print_tree(self, node):
    if node != None:
        self.post_order_print_tree(node.left)
        self.post_order_print_tree(node.right)
        print node.element

def pre_order_print_tree(self, node):
    if node != None:
        print node.element
        self.pre_order_print_tree(node.left)
        self.pre_order_print_tree(node.right)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面我们来写contain方法，查找一棵树里面是否存在某个节点。从根节点开始，如果待查找的值比当前节点大，我们就去当前节点右子树找，如果比当前节点小，我们就去当前节点的左子树去找，直到找到目标(返回True)或者找到叶子节点处仍没有找到(返回False)。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def contain(self, x, node):
    if node is None:
        return False
    if x &amp;lt; node.element:
        return self.contain(x, node.left)
    elif x &amp;gt; node.element:
        return self.contain(x, node.right)
    else:
        return True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如何找到二叉搜索树中的最大值和最小值？最大值就是一直向右子树找过去直到叶子节点。而最小值则是一直向左子树找过去直到找到叶子节点。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def findMin(self, node):
    if node == None:
        return None
    elif node.left == None:
        return node
    return self.findMin(node.left)


def findMax(self, node):
    if node == None:
        return None
    elif node.right == None:
        return node
    return self.findMax(node.right)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如何向二叉搜索树插入一个节点？以下图为例，我们要插入一个节点17,从根节点开始，17大于10，所以去右子树插入。17大于16，继续往右。来到18，17小于18所以往左。而18恰好没有左儿子，所以把17插在18的左侧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shrouded-inlet-85726.herokuapp.com/img/ch3/insert.png&#34; alt=&#34;bst2&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def insert(self, x, node):
    #不考虑相同元素出现
    if node == None:
        return Node(x)
    if x &amp;lt; node.element:
        node.left = self.insert(x,node.left)
    elif x &amp;gt; node.element:
        node.right = self.insert(x,node.right)
    return node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除则稍微来的麻烦一点，假设我们要删除下图左侧的16，我们首先来到16这个节点，然后我们从右子树中找到一个最小的元素17（其必然是一个叶子节点），把这个叶子节点17替换到16的位置并将叶子节点删除。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://shrouded-inlet-85726.herokuapp.com/img/ch3/remove.png&#34; alt=&#34;remove&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def remove(self, x, node):
    if node == None:
        return node
    if x &amp;lt; node.element:
        node.left = self.remove(x, node.left)
    elif x &amp;gt; node.element:
        node.right = self.remove(x, node.right)
    elif node.left != None and node.right != None:
        node.element = self.findMin(node.right).element
        node.right = self.remove(node.element, node.right)
    else:
        node = node.left if (node.left is not None) else node.right
    return node
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;性能分析:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;性能分析&lt;/h2&gt;

&lt;p&gt;二叉搜索树的查找，插入和删除的时间复杂度都和树高成正比，所以时间复杂度都是&lt;code&gt;$O(logn)$&lt;/code&gt;,其中n为节点数。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>