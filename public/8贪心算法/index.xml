<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>8贪心算法s on My New Hugo Site</title>
    <link>http://shrouded-inlet-85726.herokuapp.com/8%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 8贪心算法s on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://shrouded-inlet-85726.herokuapp.com/8%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>贪心算法</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/8%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/8%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>

&lt;h3 id=&#34;chapter-8:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Chapter 8&lt;/h3&gt;

&lt;h1 id=&#34;贪心算法:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;贪心算法&lt;/h1&gt;

&lt;p&gt;我们在图算法一章中提到了dijkstra算法，这个算法每次都会选择最近的一个节点来加入已知集合。这种算法我们称之为贪心算法。贪心算法在运行的每一个阶段，都会选择一个当前最好的选择（局部最优解）。比较著名的贪心算法问题有dijkstra算法，kruskal和prime算法，找零问题等等。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>图的最小生成树</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/8%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/prim_kruskal/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/8%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/prim_kruskal/</guid>
      <description>

&lt;h2 id=&#34;最小生成树:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;最小生成树&lt;/h2&gt;

&lt;p&gt;我们要考虑的问题是要在一个无向图中找出一个生成树，这棵树要连接图中的所有节点，并且树中的所有边的权值之和要最小，这就是最小生成树。
求无向图的最小生成树的方法是很典型的贪婪算法。主要有prim算法和kruskal算法。&lt;/p&gt;

&lt;h2 id=&#34;prim算法:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;prim算法&lt;/h2&gt;

&lt;p&gt;像已知节点集合中不停的加入和已知节点集合相邻的未知集合的节点，知道全部节点从未知变为已知&lt;/p&gt;

&lt;h2 id=&#34;kruskal算法:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;kruskal算法&lt;/h2&gt;

&lt;p&gt;不断选择最短且不会形成环的边，直到所有节点变为已知节点。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>常见问题</title>
      <link>http://shrouded-inlet-85726.herokuapp.com/8%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/commonquestion/</link>
      <pubDate>Sat, 09 Apr 2016 16:50:16 +0200</pubDate>
      
      <guid>http://shrouded-inlet-85726.herokuapp.com/8%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/commonquestion/</guid>
      <description>

&lt;h2 id=&#34;jump-game:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;jump game&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/jump-game/&#34;&gt;leetcode 55题&lt;/a&gt;
给定一组非负整数，每个数表示可以从这个位置向前跳不多于这个数的步子。判断是否可以从头跳到尾。&lt;/p&gt;

&lt;p&gt;比如 （2,3,1,1,4） 可以从第一个位置跳到第二个位置，再跳到最后一个位置&lt;/p&gt;

&lt;p&gt;再比如 （3,2,1,0,4） 则不能跳到最后一个位置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution(object):
    def canJump(self,nums):
        m = 0
        for i,n in enumerate(nums):
            if i &amp;gt; m:
                return False
            m = max(m, n+i)
        return True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jump-game-ii:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;jump game II&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/jump-game-ii/&#34;&gt;leetcode 45题&lt;/a&gt;
这题是上一题的升级版，假设你一定可以从头跳到尾，求最少要跳几次。我们保存两个值，一个是当前步数下能跳的最远距离，另一个是当前步数加一步条件下能到的最远距离。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution(object):
    def jump(self, nums):
        n, cur_max, next_max, steps = len(nums), 0, 0, 0
        for i in xrange(n):
            if i &amp;gt; cur_max:
                steps += 1
                cur_max = next_max
                if cur_max &amp;gt;= n: break
            next_max = max(next_max, nums[i] + i)
        return steps
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;best-time-to-buy-and-sell-stock-ii:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;best time to buy and sell stock II&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&#34;&gt;leetcode 122题&lt;/a&gt;
这道题的条件是可以买卖多次，但是如果处于买进状态下是不能买的。
策略很简单，涨价前买进，降价前卖出。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Solution(object):
    def maxProfit(self, prices):
        flag = False
        profit = 0
        for i in range(len(prices)-1):
            if prices[i]&amp;lt;prices[i+1] and not flag: #升值
                profit -= prices[i]
                flag = not flag
            if prices[i]&amp;gt;prices[i+1] and flag:
                profit += prices[i]
                flag = not flag
        if flag:
            profit += prices[-1]
        return profit

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>